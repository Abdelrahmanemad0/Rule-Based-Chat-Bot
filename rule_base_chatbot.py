# -*- coding: utf-8 -*-
"""Rule base chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/163Sn9psRGvycuHHsRVk0u19HgZ6fXr7g
"""

import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


from sklearn.metrics import accuracy_score, classification_report

# nlp
import nltk
from nltk.corpus import words as nltk_words
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
import string


nltk.download('punkt')
nltk.download('stopwords')
nltk.download('words')
nltk.download('punkt_tab')

best_model = joblib.load('model.joblib')
tfidf_vectorizer = joblib.load('vectorizer.joblib')
label_encoder = joblib.load('label_encoder.joblib')

dataset = pd.read_excel('icthub_dataset.xlsx')
dataset.head()

def preprocess_query(text):
  text = text.lower()

  text = word_tokenize(text)
  y = []

  # remove special characthers
  for i in text:
    if i.isalnum():
      y.append(i)

  text = y[:]
  y.clear()

  # remove stop words
  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)

  text = y[:]
  y.clear()

  # stemming using porter stemmer
  for i in text:
    y.append(PorterStemmer().stem(i))

  return " ".join(y)

dataset['preprocess_query'] = dataset['Query'].apply(preprocess_query)
dataset.head()

from tkinter.constants import Y
X=dataset['preprocess_query']
Y = dataset['Category']

y = label_encoder.fit_transform(Y)
X = tfidf_vectorizer.fit_transform(X)

y_pred = best_model.predict(X)

accuracy = accuracy_score(y, y_pred)
print(f"Accuracy: {accuracy}")

dataset = pd.read_excel('icthub_dataset.xlsx')
dataset.head()

best_model = joblib.load('model.joblib')
tfidf_vectorizer = joblib.load('vectorizer.joblib')
label_encoder = joblib.load('label_encoder.joblib')

def preprocess_query(text):
  text = text.lower()

  text = word_tokenize(text)
  y = []

  # remove special characthers
  for i in text:
    if i.isalnum():
      y.append(i)

  text = y[:]
  y.clear()

  # remove stop words
  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)

  text = y[:]
  y.clear()

  # stemming using porter stemmer
  for i in text:
    y.append(PorterStemmer().stem(i))

  return " ".join(y)

def get_response_from_category(category):
  matching_rows = dataset[dataset['Category'] == category]

  if not matching_rows.empty:
    response = matching_rows.iloc[0]['Response']
  return response

def is_meaninful_query(user_input):
  words_set = set(nltk_words.words())
  custom_words = {"icthub"}

  combined_words = words_set.union(custom_words)

  input_words= user_input.lower().split() # how are you  =>how,are,you

  for word in input_words:
   if word not in combined_words:
      input_words.remove(word)

  return len(input_words) > 0

def chatbot_response(user_input):

  if not is_meaninful_query(user_input):
        return "I'm sorry, I didn't understand that."
  user_input = preprocess_query(user_input)
  user_input = tfidf_vectorizer.transform([user_input]) # x =>num
  predicted_value = best_model.predict(user_input) # =>0
  predicted_value = label_encoder.inverse_transform(predicted_value)
  predicted_value = get_response_from_category(predicted_value[0])
  return predicted_value

# main
print("Chatbot: Hello! How can I assist you today?")
while True:
  user_input = input("\nYou: ")
  if user_input.lower() == 'exit':
    print("Chatbot:Goodbye!")
    break

  predicted_value = chatbot_response(user_input)
  print("chatbot:",predicted_value)

!pip install gradio

import gradio as gr

def greet(name):
  return f"{name}"

iface =gr.Interface(
    fn=chatbot_response,
    inputs="text",
    outputs="text")
iface.launch()

import gradio as gr

# Initialize global variables to track conversation state
conversation = []

def respond(user_input, is_conversation_active):
    global conversation

    if user_input.lower() == 'exit':
        conversation.append(("Chatbot", "Goodbye! The conversation has ended. Please click 'Start New Conversation' to begin a new chat."))
        return conversation, gr.update(value="", interactive=False)

    response = chatbot_response(user_input)
    conversation.append(("You", user_input))
    conversation.append(("Chatbot", response))
    return conversation, gr.update(value="")

def reset_chat():
    global conversation
    conversation = []
    return conversation, gr.update(value="", interactive=True)

with gr.Blocks() as iface:
    logo = gr.Image("icthub_logo.jpg", elem_id="logo")  # Replace with the actual path to your logo
    chatbot = gr.Chatbot(elem_id="chatbot")

    with gr.Row():
        with gr.Column(scale=7):  # 70% of the width
            user_input = gr.Textbox(label="You", placeholder="Type a message...", lines=1, elem_id="user_input")
        with gr.Column(scale=1):  # 30% of the width
            with gr.Row():
                send_button = gr.Button("Send", elem_id="send_button")
            with gr.Row():
                new_conversation_button = gr.Button("Start New Conversation", visible=True, elem_id="new_conversation_button")
    # Ensure that the button is always visible and use default actions
    send_button.click(respond, inputs=user_input, outputs=[chatbot, user_input])
    new_conversation_button.click(reset_chat, outputs=[chatbot, user_input])
    user_input.submit(respond, inputs=user_input, outputs=[chatbot, user_input])

iface.launch(share=True)